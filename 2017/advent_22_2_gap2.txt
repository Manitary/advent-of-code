input:=["..####.###.##..##....##..",".##..#.###.##.##.###.###.","......#..#.#.....#.....#.","##.###.#.###.##.#.#..###.","#..##...#.....##.#..###.#",".#..#...####...#.....###.","##...######.#.###..#.##..","###..#..##.###....##.....",".#.#####.###.#..#.#.#..#.","#.#.##.#.##..#.##..#....#","..#.#.#.#.#.##...#.####..","##.##..##...#..##..#.####","#.#..####.##.....####.##.","..####..#.#.#.#.##..###.#","..#.#.#.###...#.##..###..","#.####.##..###.#####.##..",".###.##...#.#.#.##....#.#","#...######...#####.###.#.","#.####.#.#..#...##.###...","####.#.....###..###..#.#.","..#.##.####.#######.###..","#.##.##.#.#.....#...#...#","###.#.###..#.#...#...##..","##..###.#..#####.#..##..#","#......####.#.##.#.###.##"];

convert:=function(c)
	if c = '.' then
		return [-1,0];
	elif c = '#' then
		return [1,0];
	fi;
end;

grid:=[];
r:=Int((Length(input)-1)/2);
for x in [-r..r] do
	for y in [-r..r] do
		grid[Length(grid)+1]:=[x,y,convert(input[-y+r+1][x+r+1])];
	od;
od;
position:=[0,0];
direction:=[0,1];
infections:=0;


burst:=function()
	local c, cell_exists;
	cell_exists:=false;
	for c in [1..Length(grid)] do
		if grid[c][1] = position[1] and grid[c][2] = position[2] then
			direction:=direction*[[grid[c][3][2],-grid[c][3][1]],[grid[c][3][1],grid[c][3][2]]];
			infections:=infections+Int(-grid[c][3][1]/2+1/2);
			grid[c][3]:=grid[c][3]*[[0,-1],[1,0]];
			position:=position+direction;
			cell_exists:=true;
			break;
		fi;
	od;
	if not(cell_exists) then
		grid[Length(grid)+1]:=[position,[-1,0]];
		burst();
	fi;
end;

for i in [1..10000000] do
	burst();
od;
Print(infections,"\n");